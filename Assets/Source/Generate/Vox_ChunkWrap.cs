//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Vox_ChunkWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Vox.Chunk), typeof(Vox.Volume));
		L.RegFunction("GetBlockId", GetBlockId);
		L.RegFunction("GetBlockProperty", GetBlockProperty);
		L.RegFunction("GetBlockLight", GetBlockLight);
		L.RegFunction("GetBlock", GetBlock);
		L.RegFunction("SetBlock", SetBlock);
		L.RegFunction("SetBlockProperty", SetBlockProperty);
		L.RegFunction("SetBlockLight", SetBlockLight);
		L.RegFunction("ToChunkPosition", ToChunkPosition);
		L.RegFunction("ToString", ToString);
		L.RegFunction("Destory", Destory);
		L.RegFunction("New", _CreateVox_Chunk);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("neighbours", get_neighbours, set_neighbours);
		L.RegVar("volume", get_volume, set_volume);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateVox_Chunk(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Vox.Chunk obj = new Vox.Chunk();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Vox.Chunk.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBlockId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Vox.Chunk obj = (Vox.Chunk)ToLua.CheckObject<Vox.Chunk>(L, 1);
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			byte o = obj.GetBlockId(ref arg0);
			LuaDLL.lua_pushnumber(L, o);
			ToLua.PushValue(L, arg0);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBlockProperty(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Vox.Chunk obj = (Vox.Chunk)ToLua.CheckObject<Vox.Chunk>(L, 1);
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			byte o = obj.GetBlockProperty(ref arg0);
			LuaDLL.lua_pushnumber(L, o);
			ToLua.PushValue(L, arg0);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBlockLight(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Vox.Chunk obj = (Vox.Chunk)ToLua.CheckObject<Vox.Chunk>(L, 1);
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			byte o = obj.GetBlockLight(ref arg0);
			LuaDLL.lua_pushnumber(L, o);
			ToLua.PushValue(L, arg0);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBlock(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Vox.Chunk obj = (Vox.Chunk)ToLua.CheckObject<Vox.Chunk>(L, 1);
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			Vox.Block o = obj.GetBlock(ref arg0);
			ToLua.PushValue(L, o);
			ToLua.PushValue(L, arg0);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBlock(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Vox.Chunk obj = (Vox.Chunk)ToLua.CheckObject<Vox.Chunk>(L, 1);
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			Vox.Block arg1 = StackTraits<Vox.Block>.Check(L, 3);
			obj.SetBlock(ref arg0, arg1);
			ToLua.PushValue(L, arg0);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBlockProperty(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Vox.Chunk obj = (Vox.Chunk)ToLua.CheckObject<Vox.Chunk>(L, 1);
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			byte arg1 = (byte)LuaDLL.luaL_checknumber(L, 3);
			obj.SetBlockProperty(ref arg0, arg1);
			ToLua.PushValue(L, arg0);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBlockLight(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Vox.Chunk obj = (Vox.Chunk)ToLua.CheckObject<Vox.Chunk>(L, 1);
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			byte arg1 = (byte)LuaDLL.luaL_checknumber(L, 3);
			obj.SetBlockLight(ref arg0, arg1);
			ToLua.PushValue(L, arg0);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToChunkPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Vox.Chunk obj = (Vox.Chunk)ToLua.CheckObject<Vox.Chunk>(L, 1);
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			Vox.Int3 o = obj.ToChunkPosition(ref arg0);
			ToLua.PushValue(L, o);
			ToLua.PushValue(L, arg0);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Vox.Chunk obj = (Vox.Chunk)ToLua.CheckObject<Vox.Chunk>(L, 1);
			string o = obj.ToString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Destory(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Vox.Chunk obj = (Vox.Chunk)ToLua.CheckObject<Vox.Chunk>(L, 1);
			obj.Destory();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_neighbours(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.Chunk obj = (Vox.Chunk)o;
			Vox.Chunk[] ret = obj.neighbours;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index neighbours on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_volume(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.Chunk obj = (Vox.Chunk)o;
			Vox.ChunkedVolume ret = obj.volume;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index volume on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_neighbours(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.Chunk obj = (Vox.Chunk)o;
			Vox.Chunk[] arg0 = ToLua.CheckObjectArray<Vox.Chunk>(L, 2);
			obj.neighbours = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index neighbours on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_volume(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.Chunk obj = (Vox.Chunk)o;
			Vox.ChunkedVolume arg0 = (Vox.ChunkedVolume)ToLua.CheckObject<Vox.ChunkedVolume>(L, 2);
			obj.volume = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index volume on a nil value");
		}
	}
}

