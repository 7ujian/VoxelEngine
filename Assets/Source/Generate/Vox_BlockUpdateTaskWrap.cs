//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Vox_BlockUpdateTaskWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Vox.BlockUpdateTask), typeof(System.Object));
		L.RegFunction("New", _CreateVox_BlockUpdateTask);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("blockId", get_blockId, set_blockId);
		L.RegVar("position", get_position, set_position);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateVox_BlockUpdateTask(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Vox.BlockUpdateTask obj = new Vox.BlockUpdateTask();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Vox.BlockUpdateTask.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_blockId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.BlockUpdateTask obj = (Vox.BlockUpdateTask)o;
			byte ret = obj.blockId;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index blockId on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.BlockUpdateTask obj = (Vox.BlockUpdateTask)o;
			Vox.Int3 ret = obj.position;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index position on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_blockId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.BlockUpdateTask obj = (Vox.BlockUpdateTask)o;
			byte arg0 = (byte)LuaDLL.luaL_checknumber(L, 2);
			obj.blockId = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index blockId on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.BlockUpdateTask obj = (Vox.BlockUpdateTask)o;
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			obj.position = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index position on a nil value");
		}
	}
}

