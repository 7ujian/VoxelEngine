//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Vox_BlockControllerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Vox.BlockController), typeof(System.Object));
		L.RegFunction("Build", Build);
		L.RegFunction("BeforePlace", BeforePlace);
		L.RegFunction("AfterPlace", AfterPlace);
		L.RegFunction("Update", Update);
		L.RegFunction("UseOnScene", UseOnScene);
		L.RegFunction("UseOnBlock", UseOnBlock);
		L.RegFunction("GetDirection", GetDirection);
		L.RegFunction("SetDirection", SetDirection);
		L.RegFunction("PushBlock", PushBlock);
		L.RegFunction("New", _CreateVox_BlockController);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("name", get_name, null);
		L.RegVar("canDig", get_canDig, null);
		L.RegVar("isSolid", get_isSolid, null);
		L.RegVar("color", get_color, null);
		L.RegVar("updateEnabled", get_updateEnabled, null);
		L.RegVar("canUseOnScene", get_canUseOnScene, null);
		L.RegVar("canUseOnBlock", get_canUseOnBlock, null);
		L.RegVar("builder", get_builder, set_builder);
		L.RegVar("modelBuilder", get_modelBuilder, set_modelBuilder);
		L.RegVar("height", get_height, null);
		L.RegVar("context", get_context, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateVox_BlockController(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Vox.BlockController obj = new Vox.BlockController();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1)
			{
				Vox.VoxelEngineContext arg0 = (Vox.VoxelEngineContext)ToLua.CheckObject<Vox.VoxelEngineContext>(L, 1);
				Vox.BlockController obj = new Vox.BlockController(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Vox.BlockController.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Build(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			Vox.BlockController obj = (Vox.BlockController)ToLua.CheckObject<Vox.BlockController>(L, 1);
			Vox.MeshData arg0 = (Vox.MeshData)ToLua.CheckObject<Vox.MeshData>(L, 2);
			Vox.IVolume arg1 = (Vox.IVolume)ToLua.CheckObject<Vox.IVolume>(L, 3);
			Vox.Int3 arg2 = StackTraits<Vox.Int3>.Check(L, 4);
			byte arg3 = (byte)LuaDLL.luaL_checknumber(L, 5);
			Vox.VoxelEngineContext arg4 = (Vox.VoxelEngineContext)ToLua.CheckObject<Vox.VoxelEngineContext>(L, 6);
			obj.Build(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeforePlace(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Vox.BlockController obj = (Vox.BlockController)ToLua.CheckObject<Vox.BlockController>(L, 1);
			Vox.IVolume arg0 = (Vox.IVolume)ToLua.CheckObject<Vox.IVolume>(L, 2);
			Vox.Int3 arg1 = StackTraits<Vox.Int3>.Check(L, 3);
			Vox.Block arg2 = StackTraits<Vox.Block>.Check(L, 4);
			obj.BeforePlace(arg0, ref arg1, ref arg2);
			ToLua.PushValue(L, arg1);
			ToLua.PushValue(L, arg2);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AfterPlace(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Vox.BlockController obj = (Vox.BlockController)ToLua.CheckObject<Vox.BlockController>(L, 1);
			Vox.IVolume arg0 = (Vox.IVolume)ToLua.CheckObject<Vox.IVolume>(L, 2);
			Vox.Int3 arg1 = StackTraits<Vox.Int3>.Check(L, 3);
			Vox.Block arg2 = StackTraits<Vox.Block>.Check(L, 4);
			obj.AfterPlace(arg0, ref arg1, ref arg2);
			ToLua.PushValue(L, arg1);
			ToLua.PushValue(L, arg2);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Update(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			Vox.BlockController obj = (Vox.BlockController)ToLua.CheckObject<Vox.BlockController>(L, 1);
			Vox.IVolume arg0 = (Vox.IVolume)ToLua.CheckObject<Vox.IVolume>(L, 2);
			Vox.Int3 arg1 = StackTraits<Vox.Int3>.Check(L, 3);
			Vox.BlockUpdateTask arg2 = (Vox.BlockUpdateTask)ToLua.CheckObject<Vox.BlockUpdateTask>(L, 4);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
			obj.Update(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UseOnScene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Vox.BlockController obj = (Vox.BlockController)ToLua.CheckObject<Vox.BlockController>(L, 1);
			Vox.IVolume arg0 = (Vox.IVolume)ToLua.CheckObject<Vox.IVolume>(L, 2);
			Vox.Int3 arg1 = StackTraits<Vox.Int3>.Check(L, 3);
			obj.UseOnScene(arg0, ref arg1);
			ToLua.PushValue(L, arg1);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UseOnBlock(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Vox.BlockController obj = (Vox.BlockController)ToLua.CheckObject<Vox.BlockController>(L, 1);
			Vox.IVolume arg0 = (Vox.IVolume)ToLua.CheckObject<Vox.IVolume>(L, 2);
			Vox.Int3 arg1 = StackTraits<Vox.Int3>.Check(L, 3);
			obj.UseOnBlock(arg0, ref arg1);
			ToLua.PushValue(L, arg1);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDirection(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Vox.BlockController obj = (Vox.BlockController)ToLua.CheckObject<Vox.BlockController>(L, 1);
			byte arg0 = (byte)LuaDLL.luaL_checknumber(L, 2);
			int o = obj.GetDirection(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetDirection(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Vox.BlockController obj = (Vox.BlockController)ToLua.CheckObject<Vox.BlockController>(L, 1);
			byte arg0 = (byte)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			byte o = obj.SetDirection(arg0, arg1);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PushBlock(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				Vox.IVolume arg0 = (Vox.IVolume)ToLua.CheckObject<Vox.IVolume>(L, 1);
				Vox.Int3 arg1 = StackTraits<Vox.Int3>.Check(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				Vox.Int3 arg3;
				bool o = Vox.BlockController.PushBlock(arg0, arg1, arg2, out arg3);
				LuaDLL.lua_pushboolean(L, o);
				ToLua.PushValue(L, arg3);
				return 2;
			}
			else if (count == 5)
			{
				Vox.IVolume arg0 = (Vox.IVolume)ToLua.CheckObject<Vox.IVolume>(L, 1);
				Vox.Int3 arg1 = StackTraits<Vox.Int3>.Check(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				Vox.Int3 arg3;
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				bool o = Vox.BlockController.PushBlock(arg0, arg1, arg2, out arg3, arg4);
				LuaDLL.lua_pushboolean(L, o);
				ToLua.PushValue(L, arg3);
				return 2;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Vox.BlockController.PushBlock");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_name(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.BlockController obj = (Vox.BlockController)o;
			string ret = obj.name;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index name on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_canDig(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.BlockController obj = (Vox.BlockController)o;
			bool ret = obj.canDig;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index canDig on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isSolid(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.BlockController obj = (Vox.BlockController)o;
			bool ret = obj.isSolid;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isSolid on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_color(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.BlockController obj = (Vox.BlockController)o;
			UnityEngine.Color32 ret = obj.color;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index color on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_updateEnabled(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.BlockController obj = (Vox.BlockController)o;
			bool ret = obj.updateEnabled;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index updateEnabled on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_canUseOnScene(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.BlockController obj = (Vox.BlockController)o;
			bool ret = obj.canUseOnScene;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index canUseOnScene on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_canUseOnBlock(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.BlockController obj = (Vox.BlockController)o;
			bool ret = obj.canUseOnBlock;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index canUseOnBlock on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_builder(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.BlockController obj = (Vox.BlockController)o;
			Vox.BlockBuilder ret = obj.builder;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index builder on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_modelBuilder(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.BlockController obj = (Vox.BlockController)o;
			Vox.ModelBuilder ret = obj.modelBuilder;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index modelBuilder on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_height(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.BlockController obj = (Vox.BlockController)o;
			float ret = obj.height;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index height on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_context(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.BlockController obj = (Vox.BlockController)o;
			Vox.VoxelEngineContext ret = obj.context;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index context on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_builder(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.BlockController obj = (Vox.BlockController)o;
			Vox.BlockBuilder arg0 = (Vox.BlockBuilder)ToLua.CheckObject<Vox.BlockBuilder>(L, 2);
			obj.builder = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index builder on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_modelBuilder(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.BlockController obj = (Vox.BlockController)o;
			Vox.ModelBuilder arg0 = (Vox.ModelBuilder)ToLua.CheckObject<Vox.ModelBuilder>(L, 2);
			obj.modelBuilder = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index modelBuilder on a nil value");
		}
	}
}

