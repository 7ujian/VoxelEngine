//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Vox_VolumeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Vox.Volume), typeof(System.Object));
		L.RegFunction("GetBlockId", GetBlockId);
		L.RegFunction("GetBlockIdNoCheck", GetBlockIdNoCheck);
		L.RegFunction("GetBlockProperty", GetBlockProperty);
		L.RegFunction("GetBlockPropertyNoCheck", GetBlockPropertyNoCheck);
		L.RegFunction("GetBlockLight", GetBlockLight);
		L.RegFunction("GetBlockLightNoCheck", GetBlockLightNoCheck);
		L.RegFunction("GetBlock", GetBlock);
		L.RegFunction("GetBlockNoCheck", GetBlockNoCheck);
		L.RegFunction("SetBlock", SetBlock);
		L.RegFunction("SetBlockNoCheck", SetBlockNoCheck);
		L.RegFunction("SetBlockProperty", SetBlockProperty);
		L.RegFunction("SetBlockPropertyNoCheck", SetBlockPropertyNoCheck);
		L.RegFunction("SetBlockLight", SetBlockLight);
		L.RegFunction("SetBlockLightNoCheck", SetBlockLightNoCheck);
		L.RegFunction("Render", Render);
		L.RegFunction("SetDirty", SetDirty);
		L.RegFunction("ClearDirtyFlag", ClearDirtyFlag);
		L.RegFunction("CopyTo", CopyTo);
		L.RegFunction("New", _CreateVox_Volume);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("data", get_data, set_data);
		L.RegVar("destroyed", get_destroyed, null);
		L.RegVar("size", get_size, null);
		L.RegVar("position", get_position, set_position);
		L.RegVar("dirtyFlag", get_dirtyFlag, null);
		L.RegVar("OnBlockAdd", get_OnBlockAdd, set_OnBlockAdd);
		L.RegVar("OnBlockRemove", get_OnBlockRemove, set_OnBlockRemove);
		L.RegVar("isRenderDirty", get_isRenderDirty, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateVox_Volume(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Vox.Volume obj = new Vox.Volume();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1)
			{
				Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 1);
				Vox.Volume obj = new Vox.Volume(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Vox.Volume.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBlockId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Vox.Volume obj = (Vox.Volume)ToLua.CheckObject<Vox.Volume>(L, 1);
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			byte o = obj.GetBlockId(ref arg0);
			LuaDLL.lua_pushnumber(L, o);
			ToLua.PushValue(L, arg0);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBlockIdNoCheck(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Vox.Volume obj = (Vox.Volume)ToLua.CheckObject<Vox.Volume>(L, 1);
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			byte o = obj.GetBlockIdNoCheck(ref arg0);
			LuaDLL.lua_pushnumber(L, o);
			ToLua.PushValue(L, arg0);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBlockProperty(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Vox.Volume obj = (Vox.Volume)ToLua.CheckObject<Vox.Volume>(L, 1);
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			byte o = obj.GetBlockProperty(ref arg0);
			LuaDLL.lua_pushnumber(L, o);
			ToLua.PushValue(L, arg0);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBlockPropertyNoCheck(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Vox.Volume obj = (Vox.Volume)ToLua.CheckObject<Vox.Volume>(L, 1);
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			byte o = obj.GetBlockPropertyNoCheck(ref arg0);
			LuaDLL.lua_pushnumber(L, o);
			ToLua.PushValue(L, arg0);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBlockLight(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Vox.Volume obj = (Vox.Volume)ToLua.CheckObject<Vox.Volume>(L, 1);
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			byte o = obj.GetBlockLight(ref arg0);
			LuaDLL.lua_pushnumber(L, o);
			ToLua.PushValue(L, arg0);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBlockLightNoCheck(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Vox.Volume obj = (Vox.Volume)ToLua.CheckObject<Vox.Volume>(L, 1);
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			byte o = obj.GetBlockLightNoCheck(ref arg0);
			LuaDLL.lua_pushnumber(L, o);
			ToLua.PushValue(L, arg0);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBlock(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Vox.Volume obj = (Vox.Volume)ToLua.CheckObject<Vox.Volume>(L, 1);
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			Vox.Block o = obj.GetBlock(ref arg0);
			ToLua.PushValue(L, o);
			ToLua.PushValue(L, arg0);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBlockNoCheck(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Vox.Volume obj = (Vox.Volume)ToLua.CheckObject<Vox.Volume>(L, 1);
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			Vox.Block o = obj.GetBlockNoCheck(ref arg0);
			ToLua.PushValue(L, o);
			ToLua.PushValue(L, arg0);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBlock(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Vox.Volume obj = (Vox.Volume)ToLua.CheckObject<Vox.Volume>(L, 1);
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			Vox.Block arg1 = StackTraits<Vox.Block>.Check(L, 3);
			obj.SetBlock(ref arg0, arg1);
			ToLua.PushValue(L, arg0);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBlockNoCheck(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Vox.Volume obj = (Vox.Volume)ToLua.CheckObject<Vox.Volume>(L, 1);
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			Vox.Block arg1 = StackTraits<Vox.Block>.Check(L, 3);
			obj.SetBlockNoCheck(ref arg0, arg1);
			ToLua.PushValue(L, arg0);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBlockProperty(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Vox.Volume obj = (Vox.Volume)ToLua.CheckObject<Vox.Volume>(L, 1);
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			byte arg1 = (byte)LuaDLL.luaL_checknumber(L, 3);
			obj.SetBlockProperty(ref arg0, arg1);
			ToLua.PushValue(L, arg0);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBlockPropertyNoCheck(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Vox.Volume obj = (Vox.Volume)ToLua.CheckObject<Vox.Volume>(L, 1);
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			byte arg1 = (byte)LuaDLL.luaL_checknumber(L, 3);
			obj.SetBlockPropertyNoCheck(ref arg0, arg1);
			ToLua.PushValue(L, arg0);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBlockLight(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Vox.Volume obj = (Vox.Volume)ToLua.CheckObject<Vox.Volume>(L, 1);
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			byte arg1 = (byte)LuaDLL.luaL_checknumber(L, 3);
			obj.SetBlockLight(ref arg0, arg1);
			ToLua.PushValue(L, arg0);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBlockLightNoCheck(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Vox.Volume obj = (Vox.Volume)ToLua.CheckObject<Vox.Volume>(L, 1);
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			byte arg1 = (byte)LuaDLL.luaL_checknumber(L, 3);
			obj.SetBlockLightNoCheck(ref arg0, arg1);
			ToLua.PushValue(L, arg0);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Render(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Vox.Volume obj = (Vox.Volume)ToLua.CheckObject<Vox.Volume>(L, 1);
			obj.Render();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetDirty(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Vox.Volume obj = (Vox.Volume)ToLua.CheckObject<Vox.Volume>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetDirty(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearDirtyFlag(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Vox.Volume obj = (Vox.Volume)ToLua.CheckObject<Vox.Volume>(L, 1);
			obj.ClearDirtyFlag();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CopyTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			Vox.Volume obj = (Vox.Volume)ToLua.CheckObject<Vox.Volume>(L, 1);
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			Vox.Int3 arg1 = StackTraits<Vox.Int3>.Check(L, 3);
			Vox.IVolume arg2 = (Vox.IVolume)ToLua.CheckObject<Vox.IVolume>(L, 4);
			Vox.Int3 arg3 = StackTraits<Vox.Int3>.Check(L, 5);
			obj.CopyTo(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_data(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.Volume obj = (Vox.Volume)o;
			Vox.VolumeData ret = obj.data;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index data on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_destroyed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.Volume obj = (Vox.Volume)o;
			bool ret = obj.destroyed;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index destroyed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_size(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.Volume obj = (Vox.Volume)o;
			Vox.Int3 ret = obj.size;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index size on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.Volume obj = (Vox.Volume)o;
			Vox.Int3 ret = obj.position;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index position on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_dirtyFlag(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.Volume obj = (Vox.Volume)o;
			int ret = obj.dirtyFlag;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index dirtyFlag on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnBlockAdd(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.Volume obj = (Vox.Volume)o;
			System.Action<Vox.Int3,byte> ret = obj.OnBlockAdd;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnBlockAdd on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnBlockRemove(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.Volume obj = (Vox.Volume)o;
			System.Action<Vox.Int3,byte> ret = obj.OnBlockRemove;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnBlockRemove on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isRenderDirty(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.Volume obj = (Vox.Volume)o;
			bool ret = obj.isRenderDirty;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isRenderDirty on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_data(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.Volume obj = (Vox.Volume)o;
			Vox.VolumeData arg0 = (Vox.VolumeData)ToLua.CheckObject<Vox.VolumeData>(L, 2);
			obj.data = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index data on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.Volume obj = (Vox.Volume)o;
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			obj.position = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index position on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnBlockAdd(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.Volume obj = (Vox.Volume)o;
			System.Action<Vox.Int3,byte> arg0 = (System.Action<Vox.Int3,byte>)ToLua.CheckDelegate<System.Action<Vox.Int3,byte>>(L, 2);
			obj.OnBlockAdd = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnBlockAdd on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnBlockRemove(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.Volume obj = (Vox.Volume)o;
			System.Action<Vox.Int3,byte> arg0 = (System.Action<Vox.Int3,byte>)ToLua.CheckDelegate<System.Action<Vox.Int3,byte>>(L, 2);
			obj.OnBlockRemove = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnBlockRemove on a nil value");
		}
	}
}

