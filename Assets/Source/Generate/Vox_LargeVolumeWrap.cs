//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Vox_LargeVolumeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Vox.LargeVolume), typeof(Vox.ChunkedVolume));
		L.RegFunction("AddChunk", AddChunk);
		L.RegFunction("RemoveChunk", RemoveChunk);
		L.RegFunction("GetOrCreateChunk", GetOrCreateChunk);
		L.RegFunction("GetChunk", GetChunk);
		L.RegFunction("Destroy", Destroy);
		L.RegFunction("New", _CreateVox_LargeVolume);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("chunks", get_chunks, set_chunks);
		L.RegVar("bitWidthX", get_bitWidthX, set_bitWidthX);
		L.RegVar("bitWidthY", get_bitWidthY, set_bitWidthY);
		L.RegVar("bitWidthZ", get_bitWidthZ, set_bitWidthZ);
		L.RegVar("NeighbourOffsets", get_NeighbourOffsets, set_NeighbourOffsets);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateVox_LargeVolume(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Vox.LargeVolume obj = new Vox.LargeVolume();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Vox.LargeVolume.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddChunk(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Vox.LargeVolume obj = (Vox.LargeVolume)ToLua.CheckObject<Vox.LargeVolume>(L, 1);
			Vox.Chunk arg0 = (Vox.Chunk)ToLua.CheckObject<Vox.Chunk>(L, 2);
			obj.AddChunk(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveChunk(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Vox.LargeVolume obj = (Vox.LargeVolume)ToLua.CheckObject<Vox.LargeVolume>(L, 1);
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			obj.RemoveChunk(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetOrCreateChunk(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Vox.LargeVolume obj = (Vox.LargeVolume)ToLua.CheckObject<Vox.LargeVolume>(L, 1);
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			Vox.Chunk o = obj.GetOrCreateChunk(ref arg0);
			ToLua.PushObject(L, o);
			ToLua.PushValue(L, arg0);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetChunk(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Vox.LargeVolume obj = (Vox.LargeVolume)ToLua.CheckObject<Vox.LargeVolume>(L, 1);
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			Vox.Chunk o = obj.GetChunk(ref arg0);
			ToLua.PushObject(L, o);
			ToLua.PushValue(L, arg0);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Destroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Vox.LargeVolume obj = (Vox.LargeVolume)ToLua.CheckObject<Vox.LargeVolume>(L, 1);
			obj.Destroy();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_chunks(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.LargeVolume obj = (Vox.LargeVolume)o;
			System.Collections.Generic.Dictionary<int,Vox.Chunk> ret = obj.chunks;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index chunks on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_bitWidthX(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.LargeVolume obj = (Vox.LargeVolume)o;
			int ret = obj.bitWidthX;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index bitWidthX on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_bitWidthY(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.LargeVolume obj = (Vox.LargeVolume)o;
			int ret = obj.bitWidthY;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index bitWidthY on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_bitWidthZ(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.LargeVolume obj = (Vox.LargeVolume)o;
			int ret = obj.bitWidthZ;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index bitWidthZ on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NeighbourOffsets(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Vox.LargeVolume.NeighbourOffsets);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_chunks(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.LargeVolume obj = (Vox.LargeVolume)o;
			System.Collections.Generic.Dictionary<int,Vox.Chunk> arg0 = (System.Collections.Generic.Dictionary<int,Vox.Chunk>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<int,Vox.Chunk>));
			obj.chunks = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index chunks on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_bitWidthX(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.LargeVolume obj = (Vox.LargeVolume)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.bitWidthX = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index bitWidthX on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_bitWidthY(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.LargeVolume obj = (Vox.LargeVolume)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.bitWidthY = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index bitWidthY on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_bitWidthZ(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.LargeVolume obj = (Vox.LargeVolume)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.bitWidthZ = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index bitWidthZ on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_NeighbourOffsets(IntPtr L)
	{
		try
		{
			Vox.Int3[] arg0 = ToLua.CheckStructArray<Vox.Int3>(L, 2);
			Vox.LargeVolume.NeighbourOffsets = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

