//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Vox_ChunkedVolumeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Vox.ChunkedVolume), typeof(System.Object));
		L.RegFunction("GetChunk", GetChunk);
		L.RegFunction("GetOrCreateChunk", GetOrCreateChunk);
		L.RegFunction("GetBlock", GetBlock);
		L.RegFunction("GetBlockId", GetBlockId);
		L.RegFunction("GetBlockProperty", GetBlockProperty);
		L.RegFunction("GetBlockLight", GetBlockLight);
		L.RegFunction("SetBlock", SetBlock);
		L.RegFunction("SetBlockLight", SetBlockLight);
		L.RegFunction("SetBlockProperty", SetBlockProperty);
		L.RegFunction("Destroy", Destroy);
		L.RegFunction("CopyTo", CopyTo);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("onCreateChunk", get_onCreateChunk, set_onCreateChunk);
		L.RegVar("onRemoveChunk", get_onRemoveChunk, set_onRemoveChunk);
		L.RegVar("OnBlockAdd", get_OnBlockAdd, set_OnBlockAdd);
		L.RegVar("OnBlockRemove", get_OnBlockRemove, set_OnBlockRemove);
		L.RegVar("size", get_size, null);
		L.RegVar("position", get_position, set_position);
		L.RegVar("destroyed", get_destroyed, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetChunk(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Vox.ChunkedVolume obj = (Vox.ChunkedVolume)ToLua.CheckObject<Vox.ChunkedVolume>(L, 1);
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			Vox.Chunk o = obj.GetChunk(ref arg0);
			ToLua.PushObject(L, o);
			ToLua.PushValue(L, arg0);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetOrCreateChunk(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Vox.ChunkedVolume obj = (Vox.ChunkedVolume)ToLua.CheckObject<Vox.ChunkedVolume>(L, 1);
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			Vox.Chunk o = obj.GetOrCreateChunk(ref arg0);
			ToLua.PushObject(L, o);
			ToLua.PushValue(L, arg0);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBlock(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Vox.ChunkedVolume obj = (Vox.ChunkedVolume)ToLua.CheckObject<Vox.ChunkedVolume>(L, 1);
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			Vox.Block o = obj.GetBlock(ref arg0);
			ToLua.PushValue(L, o);
			ToLua.PushValue(L, arg0);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBlockId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Vox.ChunkedVolume obj = (Vox.ChunkedVolume)ToLua.CheckObject<Vox.ChunkedVolume>(L, 1);
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			byte o = obj.GetBlockId(ref arg0);
			LuaDLL.lua_pushnumber(L, o);
			ToLua.PushValue(L, arg0);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBlockProperty(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Vox.ChunkedVolume obj = (Vox.ChunkedVolume)ToLua.CheckObject<Vox.ChunkedVolume>(L, 1);
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			byte o = obj.GetBlockProperty(ref arg0);
			LuaDLL.lua_pushnumber(L, o);
			ToLua.PushValue(L, arg0);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBlockLight(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Vox.ChunkedVolume obj = (Vox.ChunkedVolume)ToLua.CheckObject<Vox.ChunkedVolume>(L, 1);
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			byte o = obj.GetBlockLight(ref arg0);
			LuaDLL.lua_pushnumber(L, o);
			ToLua.PushValue(L, arg0);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBlock(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Vox.ChunkedVolume obj = (Vox.ChunkedVolume)ToLua.CheckObject<Vox.ChunkedVolume>(L, 1);
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			Vox.Block arg1 = StackTraits<Vox.Block>.Check(L, 3);
			obj.SetBlock(ref arg0, arg1);
			ToLua.PushValue(L, arg0);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBlockLight(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Vox.ChunkedVolume obj = (Vox.ChunkedVolume)ToLua.CheckObject<Vox.ChunkedVolume>(L, 1);
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			byte arg1 = (byte)LuaDLL.luaL_checknumber(L, 3);
			obj.SetBlockLight(ref arg0, arg1);
			ToLua.PushValue(L, arg0);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBlockProperty(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Vox.ChunkedVolume obj = (Vox.ChunkedVolume)ToLua.CheckObject<Vox.ChunkedVolume>(L, 1);
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			byte arg1 = (byte)LuaDLL.luaL_checknumber(L, 3);
			obj.SetBlockProperty(ref arg0, arg1);
			ToLua.PushValue(L, arg0);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Destroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Vox.ChunkedVolume obj = (Vox.ChunkedVolume)ToLua.CheckObject<Vox.ChunkedVolume>(L, 1);
			obj.Destroy();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CopyTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			Vox.ChunkedVolume obj = (Vox.ChunkedVolume)ToLua.CheckObject<Vox.ChunkedVolume>(L, 1);
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			Vox.Int3 arg1 = StackTraits<Vox.Int3>.Check(L, 3);
			Vox.IVolume arg2 = (Vox.IVolume)ToLua.CheckObject<Vox.IVolume>(L, 4);
			Vox.Int3 arg3 = StackTraits<Vox.Int3>.Check(L, 5);
			obj.CopyTo(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onCreateChunk(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.ChunkedVolume obj = (Vox.ChunkedVolume)o;
			System.Action<Vox.Chunk> ret = obj.onCreateChunk;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onCreateChunk on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onRemoveChunk(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.ChunkedVolume obj = (Vox.ChunkedVolume)o;
			System.Action<Vox.Chunk> ret = obj.onRemoveChunk;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onRemoveChunk on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnBlockAdd(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.ChunkedVolume obj = (Vox.ChunkedVolume)o;
			System.Action<Vox.Int3,byte> ret = obj.OnBlockAdd;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnBlockAdd on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnBlockRemove(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.ChunkedVolume obj = (Vox.ChunkedVolume)o;
			System.Action<Vox.Int3,byte> ret = obj.OnBlockRemove;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnBlockRemove on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_size(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.ChunkedVolume obj = (Vox.ChunkedVolume)o;
			Vox.Int3 ret = obj.size;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index size on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.ChunkedVolume obj = (Vox.ChunkedVolume)o;
			Vox.Int3 ret = obj.position;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index position on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_destroyed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.ChunkedVolume obj = (Vox.ChunkedVolume)o;
			bool ret = obj.destroyed;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index destroyed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onCreateChunk(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.ChunkedVolume obj = (Vox.ChunkedVolume)o;
			System.Action<Vox.Chunk> arg0 = (System.Action<Vox.Chunk>)ToLua.CheckDelegate<System.Action<Vox.Chunk>>(L, 2);
			obj.onCreateChunk = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onCreateChunk on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onRemoveChunk(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.ChunkedVolume obj = (Vox.ChunkedVolume)o;
			System.Action<Vox.Chunk> arg0 = (System.Action<Vox.Chunk>)ToLua.CheckDelegate<System.Action<Vox.Chunk>>(L, 2);
			obj.onRemoveChunk = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index onRemoveChunk on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnBlockAdd(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.ChunkedVolume obj = (Vox.ChunkedVolume)o;
			System.Action<Vox.Int3,byte> arg0 = (System.Action<Vox.Int3,byte>)ToLua.CheckDelegate<System.Action<Vox.Int3,byte>>(L, 2);
			obj.OnBlockAdd = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnBlockAdd on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnBlockRemove(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.ChunkedVolume obj = (Vox.ChunkedVolume)o;
			System.Action<Vox.Int3,byte> arg0 = (System.Action<Vox.Int3,byte>)ToLua.CheckDelegate<System.Action<Vox.Int3,byte>>(L, 2);
			obj.OnBlockRemove = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnBlockRemove on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.ChunkedVolume obj = (Vox.ChunkedVolume)o;
			Vox.Int3 arg0 = StackTraits<Vox.Int3>.Check(L, 2);
			obj.position = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index position on a nil value");
		}
	}
}

