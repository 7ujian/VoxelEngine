//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Vox_BlockWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Vox.Block), null);
		L.RegFunction("New", _CreateVox_Block);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("id", get_id, set_id);
		L.RegVar("property", get_property, set_property);
		L.RegVar("light", get_light, set_light);
		L.RegVar("Air", get_Air, set_Air);
		L.RegVar("Stone", get_Stone, set_Stone);
		L.RegVar("Void", get_Void, set_Void);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateVox_Block(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				byte arg0 = (byte)LuaDLL.luaL_checknumber(L, 1);
				Vox.Block obj = new Vox.Block(arg0);
				ToLua.PushValue(L, obj);
				return 1;
			}
			else if (count == 0)
			{
				Vox.Block obj = new Vox.Block();
				ToLua.PushValue(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Vox.Block.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_id(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.Block obj = (Vox.Block)o;
			byte ret = obj.id;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index id on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_property(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.Block obj = (Vox.Block)o;
			byte ret = obj.property;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index property on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_light(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.Block obj = (Vox.Block)o;
			byte ret = obj.light;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index light on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Air(IntPtr L)
	{
		try
		{
			ToLua.PushValue(L, Vox.Block.Air);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Stone(IntPtr L)
	{
		try
		{
			ToLua.PushValue(L, Vox.Block.Stone);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Void(IntPtr L)
	{
		try
		{
			ToLua.PushValue(L, Vox.Block.Void);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_id(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.Block obj = (Vox.Block)o;
			byte arg0 = (byte)LuaDLL.luaL_checknumber(L, 2);
			obj.id = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index id on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_property(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.Block obj = (Vox.Block)o;
			byte arg0 = (byte)LuaDLL.luaL_checknumber(L, 2);
			obj.property = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index property on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_light(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Vox.Block obj = (Vox.Block)o;
			byte arg0 = (byte)LuaDLL.luaL_checknumber(L, 2);
			obj.light = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index light on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Air(IntPtr L)
	{
		try
		{
			Vox.Block arg0 = StackTraits<Vox.Block>.Check(L, 2);
			Vox.Block.Air = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Stone(IntPtr L)
	{
		try
		{
			Vox.Block arg0 = StackTraits<Vox.Block>.Check(L, 2);
			Vox.Block.Stone = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Void(IntPtr L)
	{
		try
		{
			Vox.Block arg0 = StackTraits<Vox.Block>.Check(L, 2);
			Vox.Block.Void = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

